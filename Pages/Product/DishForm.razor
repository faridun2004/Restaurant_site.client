@page "/create-product"
@page "/edit-product/{Id:int}"
@using Restaurant_site.client.DTO
@using Restaurant_site.client.Services
@inject IProductService ProductService
@inject NavigationManager NavigationManager

<h3>@(isEdit ? "Edit Product" : "Create Product")</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<EditForm Model="product" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Name:</label>
        <InputText @bind-Value="product.Name" class="form-control" />
    </div>
    <div class="form-group">
        <label>Description:</label>
        <InputTextArea @bind-Value="product.Description" class="form-control" />
    </div>
    <div class="form-group">
        <label>Price:</label>
        <InputNumber @bind-Value="product.Price" class="form-control" />
    </div>
    <div class="form-group">
        <label>Image:</label>
        <InputFile OnChange="HandleFileSelected" class="form-control" />
    </div>
    <div class="form-group">
        <label>Status:</label>
        <InputNumber @bind-Value="product.Status" class="form-control" />
    </div>
    <div class="form-group">
        <label>ProductType:</label>
        <InputNumber @bind-Value="product.ProductType" class="form-control" />
    </div>
    <div class="form-group">
        <label>ProductCategoryId:</label>
        <InputNumber @bind-Value="product.ProductCategoryId" class="form-control" />
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {
    [Parameter] public int? Id { get; set; }
    private ProductDTO product = new ProductDTO();
    private IBrowserFile? imageFile;
    private bool isEdit => Id.HasValue;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        if (isEdit)
        {
            product = await ProductService.GetProductById(Id.Value);
        }
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        imageFile = e.File;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var content = new MultipartFormDataContent();
            content.Add(new StringContent(product.Name), "Name");
            content.Add(new StringContent(product.Description), "Description");
            content.Add(new StringContent(product.Price.ToString()), "Price");

            if (imageFile != null)
            {
                var fileContent = new StreamContent(imageFile.OpenReadStream());
                fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(imageFile.ContentType);
                content.Add(fileContent, "ImageFile", imageFile.Name);
            }

            if (isEdit)
            {
                await ProductService.UpdateProduct(product, content);
            }
            else
            {
                await ProductService.AddProduct(product, content);
            }

            NavigationManager.NavigateTo("/products");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}
