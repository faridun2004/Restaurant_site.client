@page "/products"
@using Restaurant_site.client.DTO
@using Restaurant_site.client.Services
@inject IProductService DishService
@inject NavigationManager NavigationManager

<h3 class="my-4">Dishes</h3>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        @foreach (var product in products)
        {
            <div class="col-md-4 mb-4">
                <div class="card h-100">
                    <img src="http://localhost:5055/@product.ImageUrl" class="card-img-top" alt="@product.Name" style="height: 220px; object-fit: cover;" onerror="this.onerror=null;">
                    <div class="card-body">
                        <h5 class="card-title">@product.Name</h5>
                        <p class="card-text">@product.Description</p>
                        <p class="card-text"><strong>Price:</strong> @product.Price Сомонӣ</p>
                    </div>
                    <div class="card-footer">
                        <button @onclick="() => EditProduct(product.Id)" class="btn btn-primary btn-sm">Edit</button>
                        <button @onclick="() => DeleteProduct(product.Id)" class="btn btn-danger btn-sm">Delete</button>
                    </div>
                </div>
            </div>
        }
    </div>
    <button @onclick="CreateProduct" class="btn btn-success mt-4">Create New Dish</button>
}

@code {
    private IEnumerable<ProductDTO>? products;

    protected override async Task OnInitializedAsync()
    {
        products = await DishService.GetAllProducts();
    }

    private void CreateProduct()
    {
        NavigationManager.NavigateTo("/create-product");
    }

    private void EditProduct(int id)
    {
        NavigationManager.NavigateTo($"/edit-product/{id}");
    }

    private async Task DeleteProduct(int id)
    {
        await DishService.DeleteProduct(id);
        products = await DishService.GetAllProducts();
    }
}
