@page "/product"
@inject IHttpAPIProvider _apiProvider
@using Restaurant_site.client.DTO
@using System.Net.Http.Json
@using Restaurant_site.client.Services
@inject NavigationManager _navigationManager

<PageTitle>Блюди</PageTitle>

<h1>Products</h1>
<div class="row">
    <div class="col-md-6">
        <a href='/product/add' class="btn btn-primary" role="button">
            <i class="fas fa-user-plus"></i>
            Добавить блюди
        </a>
    </div>
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Поиск товара по названию и описанию"
               @bind="SearchString" @bind:event="oninput" @onkeyup="FilterProducts" />
    </div>
</div>
@if (_allProducts == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <table class="table" style="color:black; background-color:aliceblue">
        <thead>
            <tr>
                <th>Id</th>
                <th>Имя </th>
                <th>Описание.</th>
                <th>Цена</th>
                <th>Фото</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in _filteredProducts)
            {
                <tr>
                    <td>@product.Id.ToString()</td>
                    <td>@product.Name</td>
                    <td>@product.Description</td>
                    <td>@product.Price</td>
                    <td>@product.ImageUrl</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditItem(product.Id)">Редактировать</button>
                        <button class="btn btn-danger" @onclick="() => DeleteItem(product.Id)">Удалить</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    protected string SearchString { get; set; } = string.Empty;
    private ProductDTO[]? _allProducts;
    private ProductDTO[]? _filteredProducts;
    private string? ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }  

    private async Task LoadProducts()
    {
        (bool isSuccessStatusCode, _allProducts, string message) = await _apiProvider.GetAsync<ProductDTO[]>("product/AllProducts");
        if (!isSuccessStatusCode)
        {
            ErrorMessage = $"Ошибка загрузки продуктов: {message}";
        }
        else
        {
            ErrorMessage = null;
        }
        SearchString = string.Empty;
        FilterProducts();
    }

    private async Task DeleteItem(int ProductId)
    {
        (bool isSuccessStatusCode, _, string message) = await _apiProvider.DeleteAsync<string>($"product?ProductId={ProductId}");
        if (isSuccessStatusCode)
        {
            await LoadProducts(); // Refresh the list
        }
        else
        {
            ErrorMessage = $"Ошибка удаления продукта: {message}";
        }
    }

    private void EditItem(int id)
    {
        _navigationManager.NavigateTo($"/product/edit/{id}", true);
    }

    protected void FilterProducts()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            _filteredProducts = _allProducts.Where(p => p.Name.Contains(SearchString, StringComparison.OrdinalIgnoreCase) 
                                                      || p.Description.Contains(SearchString, StringComparison.OrdinalIgnoreCase))
                                            .ToArray();
        }
        else
        {
            _filteredProducts = _allProducts;
        }
    }
}
