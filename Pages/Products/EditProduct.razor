@page "/product/edit/{id}"
@inject IHttpAPIProvider _apiProvider
@using Restaurant_site.client.DTO
@using System.Net.Http.Json
@using Restaurant_site.client.Services
@inject NavigationManager _navigationManager

<PageTitle>Edit Product</PageTitle>

<h3>Edit Product</h3>
@if (product == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <form>
        <div class="form-group">
            <label for="name">Name:</label>
            <input id="name" class="form-control" @bind="@product.Name" required />
        </div>
        <div class="form-group">
            <label for="name">Description:</label>
            <input id="name" class="form-control" @bind="@product.Description" required />
        </div>
        <div class="form-group">
            <label for="name">Price:</label>
            <input id="name" class="form-control" @bind="@product.Price" required />
        </div>
        <div class="form-group">
            <label for="name">Photo:</label>
            <input id="name" class="form-control" @bind="@product.ImageUrl" required />
        </div>
        <button type="button" class="btn btn-primary" @onclick="EditProducts">Edit Product</button>
    </form>
}

@code {
    [Parameter]
    public string Id { get; set; }

    ProductDTO product;

    protected override async Task OnInitializedAsync()
    {
        (bool isSuccessStatusCode, product, string message) = await _apiProvider.GetAsync<ProductDTO>($"product/{Id}");
    }
    private async Task EditProducts()
    {
        (bool isSuccessStatusCode, string createClient, string message) = await _apiProvider.PutAsync<string>($"product/{Id}", product);
        _navigationManager.NavigateTo("/product");
    }
}